i want to create 3 apis - file upload, file download and file delete. create the file upload api. it can be done to a channel only by an authorized member not deleted.

import mongoose from "mongoose";

const fileSchema = new mongoose.Schema({
  filename: String,
  mimetype: String,
  size: Number,
  url: String,
});

export default mongoose.model("File", fileSchema);

// Message.model.ts
import mongoose from "mongoose";

const messageSchema = new mongoose.Schema({
  content: String,
  timestamp: { type: Date, default: Date.now },
  user: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  channel: { type: mongoose.Schema.Types.ObjectId, ref: "Channel" },
  file: { type: mongoose.Schema.Types.ObjectId, ref: "File" },
  deleted: { type: Boolean, default: false },
});

messageSchema.pre("validate", function (next) {
  if (!this.content && !this.file) {
    next(new Error("Message must have either content or a file"));
  } else {
    next();
  }
});

export default mongoose.model("Message", messageSchema);

import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  isEmailVerified: {
    type: Boolean,
    default: false,
  },
  emailVerificationToken: String,
  passwordResetToken: String,
  passwordResetExpires: Date,
  isDeleted: {
    type: Boolean,
    default: false,
  },
  administeredChannels: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Channel",
    },
  ],
  memberChannels: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Channel",
    },
  ],
  invitedChannels: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Channel",
    },
  ],
});

export default mongoose.model("User", userSchema);

/* Channel.model.ts */
import mongoose from "mongoose";

const channelSchema = new mongoose.Schema({
  name: String,
  users: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
  messages: [{ type: mongoose.Schema.Types.ObjectId, ref: "Message" }], /* Reference messages instead of embedding */
  lastMessage: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Message",
  },
  creator: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  administrators: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
});

export default mongoose.model("Channel", channelSchema);

make an api according to the models. its structure must be similar to the code selected.